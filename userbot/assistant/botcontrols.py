import asyncio
from datetime import datetime

from telethon.errors import BadRequestError, FloodWaitError, ForbiddenError

from userbot import legend

from ..Config import Config
from ..core.logger import logging
from ..core.managers import eod, eor
from ..helpers import reply_id, time_formatter
from ..helpers.utils import _format
from ..sql_helper.bot_blacklists import check_is_black_list, get_all_bl_users
from ..sql_helper.bot_starters import del_starter_from_db, get_all_starters
from ..sql_helper.globals import addgvar, delgvar, gvarstatus
from . import BOTLOG, BOTLOG_CHATID
from .botmanagers import (
    ban_user_from_bot,
    get_user_and_reason,
    progress_str,
    unban_user_from_bot,
)

LOGS = logging.getLogger(__name__)

menu_category = "bot"
botusername = Config.BOT_USERNAME
cmhd = Config.HANDLER


@legend.bot_cmd(pattern="^/help$", from_users=Config.OWNER_ID)
async def bot_help(event):
    await event.reply(
        f"""рдмреЛрдЯ рдореЗрдВ рдХрдорд╛рдВрдб рд╣реИред:
**рдиреЛрдЯ : **__рдпрд╣ рдХрдорд╛рдВрдб рд╕рд┐рд░реНрдл рдЗрд╕реА рдмреЛрдЯ рдореЗрдВ рдХрд╛рдо рдХрд░реЗрдЧрд╛__ {botusername}
тАв **рдХрдорд╛рдВрдб : **/uinfo <рдХрд┐рд╕реА рдпреВрдЬрд░ рдХреЛ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░рдХреЗ>
тАв **рдЗрдВрдлреЙрд░реНрдореЗрд╢рди : **__рдЖрдкрдиреЗ рджреЗрдЦрд╛ рд╣реИ рдХрд┐ рдлреЙрд░рд╡рд░реНрдб рдХрд┐рдП рдЧрдП рд╕реНрдЯрд┐рдХрд░реНрд╕/рдЗрдореЛрдЬреА рдореЗрдВ рдлреЙрд░рд╡рд░реНрдб рдЯреИрдЧ рдирд╣реАрдВ рд╣реЛрддрд╛ рд╣реИ, рдЗрд╕рд▓рд┐рдП рдЖрдк рдЙрд╕ рдпреВрдЬрд░ рдХреА рдкрд╣рдЪрд╛рди рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдЬрд┐рд╕рдиреЗ рдЗрд╕ рдХрдорд╛рдВрдб рджреНрд╡рд╛рд░рд╛ рдореИрд╕реЗрдЬ рднреЗрдЬреЗ рд╣реИрдВред.__
тАв **рдиреЛрдЯ : **__рдпрд╣ рд╕рднреА рдлреЙрд░рд╡рд░реНрдб рдХрд┐рдП рдЧрдП рд╕рдВрджреЗрд╢реЛрдВ рдХреЗ рд▓рд┐рдП рдХрд╛рдо рдХрд░рддрд╛ рд╣реИред рдпрд╣рд╛рдВ рддрдХ тАЛтАЛтАЛтАЛрдХрд┐ рдЙрди рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП рднреА рдЬрд┐рдирдХреА рдЕрдиреБрдорддрд┐ рд╣реИ рд╕рдВрджреЗрд╢ рдЕрдЧреНрд░реЗрд╖рд┐рдд рдХрд░реЗрдВ рдХреЛрдИ рдирд╣реАрдВ.__
тАв **рдХрдорд╛рдВрдб : **/ban <рдХрд╛рд░рдг> or /ban <рдпреВрдЬрд░рдиреЗрдо/рдпреВрдЬрд░ рдЖрдИрдбреА> <рдХрд╛рд░рдг>
тАв **рдЗрдВрдлреЙрд░реНрдореЗрд╢рди : **__рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╕рдВрджреЗрд╢ рдХрд╛ рдХрд╛рд░рдг рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреЗрдВ рддрд╛рдХрд┐ рдЙрд╕реЗ рд╕реВрдЪрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ рдХреНрдпреЛрдВрдХрд┐ рдЖрдкрдиреЗ рдмреЙрдЯ рд╕реЗ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдХрд░ рджрд┐рдпрд╛ рд╣реИ рдФрд░ рдЙрд╕рдХреЗ рд╕рдВрджреЗрд╢ рдЖрдкрдХреЛ рдЖрдЧреЗ рдирд╣реАрдВ рднреЗрдЬреЗ рдЬрд╛рдПрдВрдЧреЗ.__
тАв **рдиреЛрдЯ : **__рдХрд╛рд░рдг рдЬрд░реВрд░реА рд╣реИред рдЕрдХрд╛рд░рдг рдпрд╣ рдХрд╛рдо рдирд╣реАрдВ рдХрд░реЗрдЧрд╛. __
тАв **рдХрдорд╛рдВрдб : **/unban <рдХрд╛рд░рдг(рдРрдЪреНрдЫрд┐рдХ)> or /unban <рдпреВрдЬрд░рдиреЗрдо/рдпреВрдЬрд░ рдЖрдИрдбреА>
тАв **рдЗрдВрдлреЙрд░реНрдореЗрд╢рди : **__рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╕рдВрджреЗрд╢ рдХрд╛ рдЙрддреНрддрд░ рджреЗрдВ рдпрд╛ рдмреЙрдЯ рд╕реЗ рдкреНрд░рддрд┐рдмрдВрдз рд╣рдЯрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо/рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЖрдИрдбреА рдкреНрд░рджрд╛рди рдХрд░реЗрдВ.__
тАв **рдиреЛрдЯ : **__рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреА рд╕реВрдЪреА рдЙрдкрдпреЛрдЧ рдХреА рдЬрд╛рдВрдЪ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП__ `{cmhd}bblist`.
тАв **рдХрдорд╛рдВрдб : **/broadcast
тАв **рдЗрдВрдлреЙрд░реНрдореЗрд╢рди : **__рдЖрдкрдХреЗ рдмреЙрдЯ рдХреЛ рд╢реБрд░реВ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдкреНрд░рддреНрдпреЗрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдкреНрд░рд╕рд╛рд░рд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рд╕рдВрджреЗрд╢ рдХрд╛ рдЙрддреНрддрд░ рджреЗрдВред рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреА рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ__ `{cmhd}bot_users`.
тАв **рдиреЛрдЯ: **__рдпрджрд┐ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдиреЗ рдмреЙрдЯ рдХреЛ рд░реЛрдХ рджрд┐рдпрд╛/рдЕрд╡рд░реБрджреНрдз рдХрд░ рджрд┐рдпрд╛ рддреЛ рдЙрд╕реЗ рдЖрдкрдХреЗ рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ рдпрд╛рдиреА рд╡рд╣ bot_starters рд╕реВрдЪреА рд╕реЗ рдорд┐рдЯрд╛ рджрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛.__
"""
    )


@legend.bot_cmd(pattern="^/broadcast$", from_users=Config.OWNER_ID)
async def bot_broadcast(event):
    replied = await event.get_reply_message()
    if not replied:
        return await event.reply("Reply to a message for Broadcasting First !")
    start_ = datetime.now()
    br_cast = await replied.reply("рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯрд┐рдВрдЧред..")
    blocked_users = []
    count = 0
    bot_users_count = len(get_all_starters())
    if bot_users_count == 0:
        return await event.reply("`рдХрд┐рд╕реА рдиреЗ рдЖрдкрдХрд╛ рдмреЙрдЯ рд╢реБрд░реВ рдирд╣реАрдВ рдХрд┐рдпрд╛.`")
    users = get_all_starters()
    if users is None:
        return await event.reply("`рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреА рд╕реВрдЪреА рд▓рд╛рддреЗ рд╕рдордп рддреНрд░реБрдЯрд┐рдпрд╛рдВ рд╣реБрдИрдВ.`")
    for user in users:
        try:
            await event.client.send_message(
                int(user.user_id), "ЁЯФК рдЖрдкрдХреЛ рдПрдХ **рдирдпрд╛** рдкреНрд░рд╕рд╛рд░рдг рдкреНрд░рд╛рдкреНрдд рд╣реБрдЖ."
            )
            await event.client.send_message(int(user.user_id), replied)
            await asyncio.sleep(0.8)
        except FloodWaitError as e:
            await asyncio.sleep(e.seconds)
        except (BadRequestError, ValueError, ForbiddenError):
            del_starter_from_db(int(user.user_id))
        except Exception as e:
            LOGS.error(str(e))
            if BOTLOG:
                await event.client.send_message(
                    BOTLOG_CHATID, f"**рдкреНрд░рд╕рд╛рд░рдг рдХрд░рддреЗ рд╕рдордп рддреНрд░реБрдЯрд┐**\n`{e}`"
                )
        else:
            count += 1
            if count % 5 == 0:
                try:
                    prog_ = (
                        "ЁЯФК рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯрд┐рдВрдЧ ...\n\n"
                        + progress_str(
                            total=bot_users_count,
                            current=count + len(blocked_users),
                        )
                        + f"\n\nтАв тЬФя╕П **рд╕рдлрд▓рддрд╛** :  `{count}`\n"
                        + f"тАв тЬЦя╕П **рдлреЗрд▓реНрдб** :  `{len(blocked_users)}`"
                    )
                    await br_cast.edit(prog_)
                except FloodWaitError as e:
                    await asyncio.sleep(e.seconds)
    end_ = datetime.now()
    b_info = f"ЁЯФКрд╕рдВрджреЗрд╢ рдХреЛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреНрд░рд╕рд╛рд░рд┐рдд рдХрд┐рдпрд╛ рдЧрдпрд╛ тЮЬ  <b>{count} рдпреВрдЬрд░реНрд╕.</b>"
    if len(blocked_users) != 0:
        b_info += f"\nЁЯЪл  <b>{len(blocked_users)} рдпреВрдЬрд░реНрд╕</b> рдЖрдкрдХреЗ рдмреЙрдЯ рдХреЛ рд╣рд╛рд▓ рд╣реА рдореЗрдВ рдмреНрд▓реЙрдХ рдХрд┐рдпрд╛ рд╣реИ, рдЗрд╕рд▓рд┐рдП рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред."
    b_info += (
        f"\nтП│  <code>рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд▓реА: {time_formatter((end_ - start_).seconds)}</code>."
    )
    await br_cast.edit(b_info, parse_mode="html")


@legend.legend_cmd(
    pattern="bot_users$",
    command=("bot_users", menu_category),
    info={
        "header": "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреА рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЬрд┐рдиреНрд╣реЛрдВрдиреЗ рдмреЙрдЯ рд╢реБрд░реВ рдХрд┐рдпрд╛.",
        "description": "рдЖрдкрдХрд╛ рдмреЙрдЯ рд╢реБрд░реВ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреА рдкреВрд░реА рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП",
        "usage": "{tr}bot_users",
    },
)
async def ban_starters(event):
    "рдмреЛрдЯ рдХреЛ рд╢реБрд░реВ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреА рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП"
    ulist = get_all_starters()
    if len(ulist) == 0:
        return await eod(event, "`рдЕрднреА рддрдХ рдХрд┐рд╕реА рдиреЗ рдЖрдкрдХрд╛ рдмреЙрдЯ рд╢реБрд░реВ рдирд╣реАрдВ рдХрд┐рдпрд╛.`")
    msg = "**рдЖрдкрдХреЗ рдмреЙрдЯ рдХреЛ рд╢реБрд░реВ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреА рд╕реВрдЪреА рд╣реИ :\n\n**"
    for user in ulist:
        msg += f"тАв ЁЯСд {_format.mentionuser(user.first_name , user.user_id)}\n**ID:** `{user.user_id}`\n**рдпреВрдЬрд░рдиреЗрдо:** @{user.username}\n**рддрд╛рд░реАрдЦ: **__{user.date}__\n\n"
    await eor(event, msg)


@legend.bot_cmd(pattern="^/ban\\s+([\\s\\S]*)", from_users=Config.OWNER_ID)
async def ban_botpms(event):
    user_id, reason = await get_user_and_reason(event)
    reply_to = await reply_id(event)
    if not user_id:
        return await event.client.send_message(
            event.chat_id,
            "`рдореБрдЭреЗ рдкреНрд░рддрд┐рдмрдВрдз рд▓рдЧрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╣реАрдВ рдорд┐рд▓ рд░рд╣рд╛ рд╣реИ .`",
            reply_to=reply_to,
        )
    if not reason:
        return await event.client.send_message(
            event.chat_id,
            "`рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкрд╣рд▓реЗ рдХрд╛рд░рдг рдмрддрд╛рдПрдВ`",
            reply_to=reply_to,
        )
    try:
        user = await event.client.get_entity(user_id)
        user_id = user.id
    except Exception as e:
        return await event.reply(f"**рдПрд░рд░:**\n`{e}`")
    if user_id == Config.OWNER_ID:
        return await event.reply("рдореИрдВ рдЖрдк рдкрд░ рдкреНрд░рддрд┐рдмрдВрдз рдирд╣реАрдВ рд▓рдЧрд╛ рд╕рдХрддрд╛ рдорд╛рд╕реНрдЯрд░")
    check = check_is_black_list(user.id)
    if check:
        return await event.client.send_message(
            event.chat_id,
            f"#рдмреИрди\
            \nрдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдореЗрд░реА рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╕реВрдЪреА рдореЗрдВ рдкрд╣рд▓реЗ рд╕реЗ рдореМрдЬреВрдж рд╣реИ.\
            \n**рдмреИрди рдХрд╛ рдХрд╛рд░рдг:** `{check.reason}`\
            \n**рддрд╛рд░реАрдЦ:** `{check.date}`.",
        )
    msg = await ban_user_from_bot(user, reason, reply_to)
    await event.reply(msg)


@legend.bot_cmd(pattern="^/unban(?:\\s|$)([\\s\\S]*)", from_users=Config.OWNER_ID)
async def ban_botpms(event):
    user_id, reason = await get_user_and_reason(event)
    reply_to = await reply_id(event)
    if not user_id:
        return await event.client.send_message(
            event.chat_id,
            "`рдореБрдЭреЗ рдкреНрд░рддрд┐рдмрдВрдз рд╣рдЯрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╣реАрдВ рдорд┐рд▓ рд░рд╣рд╛ рд╣реИ`",
            reply_to=reply_to,
        )
    try:
        user = await event.client.get_entity(user_id)
        user_id = user.id
    except Exception as e:
        return await event.reply(f"**рдПрд░рд░:**\n`{e}`")
    check = check_is_black_list(user.id)
    if not check:
        return await event.client.send_message(
            event.chat_id,
            f"#User_Not_Banned\
            \nЁЯСд {_format.mentionuser(user.first_name , user.id)} рдореЗрд░реА рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╕реВрдЪреА рдореЗрдВ рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИ",
        )
    msg = await unban_user_from_bot(user, reason, reply_to)
    await event.reply(msg)


@legend.legend_cmd(
    pattern="bblist$",
    command=("bblist", menu_category),
    info={
        "header": "рдЙрди рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреА рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЬрд┐рдиреНрд╣реЗрдВ рдмреЛрдЯ рдореЗрдВ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.",
        "description": "рдореЗрдВ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреА рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП",
        "usage": "{tr}bblist",
    },
)
async def ban_starters(event):
    "рдореЗрдВ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреА рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП."
    ulist = get_all_bl_users()
    if len(ulist) == 0:
        return await eod(
            event, "`рдЖрдкрдХреЗ рдмреЙрдЯ рдореЗрдВ рдЕрднреА рддрдХ рдХрд┐рд╕реА рдХреЛ рднреА рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.`"
        )
    msg = "**рдЖрдкрдХреЗ рдмреЙрдЯ рдореЗрдВ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреА рд╕реВрдЪреА рд╣реИ:\n\n**"
    for user in ulist:
        msg += f"тАв ЁЯСд {_format.mentionuser(user.first_name , user.chat_id)}\n**рдЖрдИрдбреА:** `{user.chat_id}`\n**рдпреВрдЬрд░рдиреЗрдо:** @{user.username}\n**рддрд╛рд░реАрдЦ: **__{user.date}__\n**рдХрд╛рд░рдг:** __{user.reason}__\n\n"
    await eor(event, msg)


@legend.legend_cmd(
    pattern="bot_antif (on|off)$",
    command=("bot_antif", menu_category),
    info={
        "header": "рдмреЙрдЯ рдПрдВрдЯреАрдлреНрд▓рдб рдХреЛ рд╕рдХреНрд╖рдо рдпрд╛ рдЕрдХреНрд╖рдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП.",
        "description": "рдЕрдЧрд░ рдЗрд╕реЗ рдЪрд╛рд▓реВ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдерд╛ рддреЛ рдХрдо рд╕рдордп рдореЗрдВ 10 рд╕рдВрджреЗрд╢реЛрдВ рдпрд╛ рд╕рдорд╛рди рд╕рдВрджреЗрд╢реЛрдВ рдХреЗ 10 рд╕рдВрдкрд╛рджрди рдХреЗ рдмрд╛рдж рдЖрдкрдХрд╛ рдмреЙрдЯ рдСрдЯреЛ рдЙрдиреНрд╣реЗрдВ рд▓реЙрдХ рдХрд░ рджреЗрддрд╛ рд╣реИ.",
        "usage": [
            "{tr}bot_antif on",
            "{tr}bot_antif off",
        ],
    },
)
async def ban_antiflood(event):
    "рдмреЙрдЯ рдПрдВрдЯреАрдлреНрд▓рдб рдХреЛ рд╕рдХреНрд╖рдо рдпрд╛ рдЕрдХреНрд╖рдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП."
    input_str = event.pattern_match.group(1)
    if input_str == "on":
        if gvarstatus("bot_antif") is not None:
            return await eod(event, "`рдмреЙрдЯ рдПрдВрдЯреАрдлреНрд▓рдб рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рд╕рдХреНрд╖рдо рдерд╛ред`")
        addgvar("bot_antif", True)
        await eod(event, "`рдмреЙрдЯ рдПрдВрдЯреАрдлреНрд▓рдб рд╕рдХреНрд╖рдо.`")
    elif input_str == "off":
        if gvarstatus("bot_antif") is None:
            return await eod(event, "`рдмреЙрдЯ рдПрдВрдЯрд┐рдлреНрд▓реВрдб рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдЕрдХреНрд╖рдо рдерд╛.`")
        delgvar("bot_antif")
        await eod(event, "`рдмреЙрдЯ рдПрдВрдЯреАрдлреНрд▓реВрдб рдбрд┐рд╕реЗрдмрд▓реНрдб.`")
